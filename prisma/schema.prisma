generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("API_POSTGRES_URL")
}

model Tenant {
  id         String        @id @default(uuid()) @db.Uuid
  slug       String        @unique
  name       String
  theme      Json?
  governanceTier String    @map("governance_tier") @default("standard")
  dataRetentionDays Int    @map("data_retention_days") @default(365)
  createdAt  DateTime      @map("created_at") @default(now())
  updatedAt  DateTime      @map("updated_at") @default(now()) @updatedAt
  createdBy  String?       @map("created_by") @db.Uuid
  updatedBy  String?       @map("updated_by") @db.Uuid
  version    Int           @default(1)
  roles      Role[]
  users      User[]
  featureFlags FeatureFlag[]
  apiKeys    ApiKey[]
  loans      Loan[]
  events     Event[]
  drDrills   DisasterRecoveryDrill[]
  accessAudits AccessAudit[]

  @@map("tenants")
}

model Role {
  id         String        @id @default(uuid()) @db.Uuid
  tenantId   String?       @map("tenant_id") @db.Uuid
  code       String
  name       String
  description String?
  createdAt  DateTime      @map("created_at") @default(now())
  updatedAt  DateTime      @map("updated_at") @default(now()) @updatedAt
  createdBy  String?       @map("created_by") @db.Uuid
  updatedBy  String?       @map("updated_by") @db.Uuid
  version    Int           @default(1)
  tenant     Tenant?       @relation(fields: [tenantId], references: [id])
  rolePermissions RolePermission[]
  userRoles  UserRole[]

  @@unique([tenantId, code])
  @@map("roles")
}

model User {
  id          String      @id @default(uuid()) @db.Uuid
  tenantId    String      @map("tenant_id") @db.Uuid
  email       String
  name        String
  passwordHash String?    @map("password_hash")
  status      String?
  createdAt   DateTime    @map("created_at") @default(now())
  updatedAt   DateTime    @map("updated_at") @default(now()) @updatedAt
  createdBy   String?     @map("created_by") @db.Uuid
  updatedBy   String?     @map("updated_by") @db.Uuid
  version     Int         @default(1)
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  userRoles   UserRole[]
  loanParties LoanParty[]
  tasksAssigned Task[]    @relation("TaskAssignee")
  ownedConditions Condition[] @relation("ConditionAssignee")
  communications Communication[] @relation("CommunicationActor")
  accessAudits AccessAudit[]

  @@unique([tenantId, email])
  @@index([tenantId])
  @@map("users")
}

model UserRole {
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  assignedAt DateTime @map("assigned_at") @default(now())
  assignedBy String?  @map("assigned_by") @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId    String   @map("role_id") @db.Uuid
  permission String
  createdAt DateTime @map("created_at") @default(now())
  createdBy String?  @map("created_by") @db.Uuid
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permission])
  @@map("role_permissions")
}

model FeatureFlag {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String?  @map("tenant_id") @db.Uuid
  flag       String
  category   String   @default("application")
  enabled    Boolean  @default(false)
  rollout    Json?
  lastEvaluatedAt DateTime? @map("last_evaluated_at")
  createdAt  DateTime @map("created_at") @default(now())
  updatedAt  DateTime @map("updated_at") @default(now()) @updatedAt
  createdBy  String?  @map("created_by") @db.Uuid
  updatedBy  String?  @map("updated_by") @db.Uuid
  version    Int      @default(1)
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, flag])
  @@map("feature_flags")
}

model ApiKey {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  name      String
  keyHash   String   @map("key_hash")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @default(now()) @updatedAt
  createdBy String?  @map("created_by") @db.Uuid
  updatedBy String?  @map("updated_by") @db.Uuid
  version   Int      @default(1)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@map("api_keys")
}

model Loan {
  id          String     @id @default(uuid()) @db.Uuid
  tenantId    String     @map("tenant_id") @db.Uuid
  loanNumber  String     @map("loan_number")
  status      String
  amount      Decimal?   @db.Decimal(14, 2)
  loanType    String?    @map("loan_type")
  governanceScope String @map("governance_scope") @default("loan")
  drProtected Boolean   @map("dr_protected") @default(false)
  createdAt   DateTime   @map("created_at") @default(now())
  updatedAt   DateTime   @map("updated_at") @default(now()) @updatedAt
  createdBy   String?    @map("created_by") @db.Uuid
  updatedBy   String?    @map("updated_by") @db.Uuid
  version     Int        @default(1)
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  borrowers   Borrower[]
  coBorrowers CoBorrower[]
  loanParties LoanParty[]
  loanStates  LoanState[]
  documents   Document[]
  conditions  Condition[]
  tasks       Task[]
  communications Communication[]
  clocks      Clock[]
  disclosures Disclosure[]
  orders      Order[]
  pricingQuotes PricingQuote[]
  rateLocks   RateLock[]
  findings    Finding[]
  events      Event[]

  @@unique([tenantId, loanNumber])
  @@index([tenantId, status])
  @@map("loans")
}

enum RuleResult {
  pass
  warn
  fail
}

enum RuleOverlayScope {
  tenant
  investor
  state
}

model RuleCatalog {
  id           String          @id @default(uuid()) @db.Uuid
  code         String          @unique
  title        String
  description  String?
  jurisdiction String?
  citations    String[]
  createdAt    DateTime        @map("created_at") @default(now())
  updatedAt    DateTime        @map("updated_at") @default(now()) @updatedAt
  createdBy    String?         @map("created_by") @db.Uuid
  updatedBy    String?         @map("updated_by") @db.Uuid
  versions     RuleVersion[]

  @@map("rule_catalog")
}

model RuleVersion {
  id               String           @id @default(uuid()) @db.Uuid
  catalogId        String           @map("catalog_id") @db.Uuid
  versionInt       Int              @map("version_int")
  effectiveFrom    DateTime?        @map("effective_from")
  effectiveTo      DateTime?        @map("effective_to")
  severity         String
  dslJson          Json             @map("dsl_json")
  inputsSchema     Json             @map("inputs_schema")
  outputsSchema    Json             @map("outputs_schema")
  dependencies     String[]
  status           String           @default("draft")
  createdAt        DateTime         @map("created_at") @default(now())
  updatedAt        DateTime         @map("updated_at") @default(now()) @updatedAt
  createdBy        String?          @map("created_by") @db.Uuid
  updatedBy        String?          @map("updated_by") @db.Uuid
  catalog          RuleCatalog      @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  overlays         RuleOverlay[]
  tests            RuleTest[]
  runs             RuleRun[]

  @@unique([catalogId, versionInt])
  @@index([effectiveFrom])
  @@index([effectiveTo])
  @@map("rule_versions")
}

model RuleOverlay {
  id            String             @id @default(uuid()) @db.Uuid
  scope         RuleOverlayScope
  scopeRef      String             @map("scope_ref")
  ruleVersionId String             @map("rule_version_id") @db.Uuid
  overlayDsl    Json               @map("overlay_dsl_json")
  effectiveFrom DateTime?          @map("effective_from")
  effectiveTo   DateTime?          @map("effective_to")
  createdAt     DateTime           @map("created_at") @default(now())
  updatedAt     DateTime           @map("updated_at") @default(now()) @updatedAt
  createdBy     String?            @map("created_by") @db.Uuid
  updatedBy     String?            @map("updated_by") @db.Uuid
  ruleVersion   RuleVersion        @relation(fields: [ruleVersionId], references: [id], onDelete: Cascade)

  @@index([ruleVersionId])
  @@index([scope, scopeRef])
  @@map("overlays")
}

model RuleTest {
  id                 String      @id @default(uuid()) @db.Uuid
  ruleVersionId      String      @map("rule_version_id") @db.Uuid
  name               String
  inputFixtureJson   Json        @map("input_fixture_json")
  expectedOutputJson Json        @map("expected_output_json")
  createdAt          DateTime    @map("created_at") @default(now())
  updatedAt          DateTime    @map("updated_at") @default(now()) @updatedAt
  createdBy          String?     @map("created_by") @db.Uuid
  updatedBy          String?     @map("updated_by") @db.Uuid
  ruleVersion        RuleVersion @relation(fields: [ruleVersionId], references: [id], onDelete: Cascade)

  @@index([ruleVersionId])
  @@map("rule_tests")
}

model RuleRun {
  id                 String      @id @default(uuid()) @db.Uuid
  tenantId           String      @map("tenant_id") @db.Uuid
  loanId             String?     @map("loan_id") @db.Uuid
  ruleVersionId      String      @map("rule_version_id") @db.Uuid
  inputsSnapshotJson Json        @map("inputs_snapshot_json")
  inputsSnapshotHash String      @map("inputs_snapshot_hash")
  result             RuleResult
  outputsJson        Json        @map("outputs_json")
  evaluatedAt        DateTime    @map("evaluated_at") @default(now())
  latencyMs          Int         @map("latency_ms")
  createdAt          DateTime    @map("created_at") @default(now())
  ruleVersion        RuleVersion @relation(fields: [ruleVersionId], references: [id], onDelete: Cascade)
  findings           RuleFinding[]
  tenant             Tenant      @relation(fields: [tenantId], references: [id])
  loan               Loan?       @relation(fields: [loanId], references: [id])

  @@index([tenantId, evaluatedAt])
  @@index([ruleVersionId])
  @@map("rule_runs")
}

model RuleFinding {
  id             String     @id @default(uuid()) @db.Uuid
  loanId         String?    @map("loan_id") @db.Uuid
  ruleRunId      String     @map("rule_run_id") @db.Uuid
  code           String
  severity       String
  message        String
  explain        String
  ruleVersionId  String     @map("rule_version_id") @db.Uuid
  citations      String[]
  actionsJson    Json       @map("actions_json")
  resolved       Boolean    @map("resolved_bool") @default(false)
  resolvedAt     DateTime?  @map("resolved_at")
  resolverUserId String?    @map("resolver_user_id") @db.Uuid
  createdAt      DateTime   @map("created_at") @default(now())
  updatedAt      DateTime   @map("updated_at") @default(now()) @updatedAt
  ruleRun        RuleRun    @relation(fields: [ruleRunId], references: [id], onDelete: Cascade)
  loan           Loan?      @relation(fields: [loanId], references: [id])

  @@index([ruleRunId])
  @@index([loanId])
  @@map("rule_findings")
}

model RuleException {
  id              String    @id @default(uuid()) @db.Uuid
  loanId          String    @map("loan_id") @db.Uuid
  ruleCode        String    @map("rule_code")
  justification   String
  approverUserId  String?   @map("approver_user_id") @db.Uuid
  scope           String
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @default(now()) @updatedAt
  loan            Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([loanId])
  @@map("exceptions")
}

model Borrower {
  id          String   @id @default(uuid()) @db.Uuid
  tenantId    String   @map("tenant_id") @db.Uuid
  loanId      String?  @map("loan_id") @db.Uuid
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String?
  phone       String?
  ssn         String?
  dob         DateTime? @db.Date
  bureauFileId String? @map("bureau_file_id")
  bankAccountNumber String? @map("bank_account_number")
  dataClassification String @map("data_classification") @default("restricted")
  maskProfile String      @map("mask_profile") @default("standard")
  createdAt   DateTime @map("created_at") @default(now())
  updatedAt   DateTime @map("updated_at") @default(now()) @updatedAt
  createdBy   String?  @map("created_by") @db.Uuid
  updatedBy   String?  @map("updated_by") @db.Uuid
  version     Int      @default(1)
  loan        Loan?    @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([tenantId, loanId])
  @@map("borrowers")
}

model CoBorrower {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String?
  phone     String?
  ssn       String?
  dob       DateTime? @db.Date
  dataClassification String @map("data_classification") @default("restricted")
  maskProfile String      @map("mask_profile") @default("standard")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([tenantId, loanId])
  @@map("co_borrowers")
}

model LoanParty {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String   @map("loan_id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  role      String
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id])

  @@map("loan_parties")
}

model LoanState {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String   @map("loan_id") @db.Uuid
  status    String
  reason    String?
  effectiveAt DateTime @map("effective_at") @default(now())
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan      @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("loan_states")
}

model Document {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  category  String?
  uri       String?
  status    String?
  dataClassification String @map("data_classification") @default("internal")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([tenantId, status])
  @@map("documents")
}

model Condition {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  description String?
  status    String?
  dueAt     DateTime? @map("due_at")
  assigneeId String?  @map("assignee") @db.Uuid
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  assignee  User?     @relation("ConditionAssignee", fields: [assigneeId], references: [id])

  @@index([tenantId, status, dueAt])
  @@map("conditions")
}

model Task {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  title     String
  description String?
  status    String?
  assigneeId  String?   @map("assignee") @db.Uuid
  dueAt     DateTime? @map("due_at")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  assignee  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@index([tenantId, assigneeId, dueAt])
  @@map("tasks")
}

model Communication {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  channel   String?
  subject   String?
  body      String?
  actorId   String?   @map("actor") @db.Uuid
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  actor     User?     @relation("CommunicationActor", fields: [actorId], references: [id])

  @@map("communications")
}

model Clock {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  clockType String   @map("clock_type")
  startedAt DateTime @map("started_at") @default(now())
  stoppedAt DateTime? @map("stopped_at")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("clocks")
}

model Disclosure {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  disclosureType String? @map("disclosure_type")
  deliveredAt DateTime? @map("delivered_at")
  status    String?
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("disclosures")
}

model Order {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  orderType String?  @map("order_type")
  vendor    String?
  status    String?
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model PricingQuote {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  quote     Json?
  effectiveAt DateTime? @map("effective_at")
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("pricing_quotes")
}

model RateLock {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  lockNumber String? @map("lock_number")
  expiresAt DateTime? @map("expires_at")
  status    String?
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("rate_locks")
}

model Finding {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  findingType String? @map("finding_type")
  severity  String?
  description String?
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("findings")
}

model Event {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  loanId    String?  @map("loan_id") @db.Uuid
  type      String
  source    String?
  actor     String?   @db.Uuid
  payload   Json      @map("payload_jsonb")
  occurredAt DateTime @map("occurred_at") @default(now())
  prevHash  String?   @map("prev_hash")
  hash      String
  governanceTags String[] @map("governance_tags")
  hashVersion Int       @map("hash_version") @default(1)
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now()) @updatedAt
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  version   Int       @default(1)
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  loan      Loan?     @relation(fields: [loanId], references: [id])

  @@index([tenantId, occurredAt(sort: Desc)])
  @@map("events")
}

model EventIntegrity {
  id         String   @id @default(uuid()) @db.Uuid
  runAt      DateTime @map("run_at") @default(now())
  checkedFrom DateTime @map("checked_from")
  checkedTo  DateTime @map("checked_to")
  total      Int
  mismatches Int
  notes      Json?

  @@map("events_integrity")
}

model DisasterRecoveryDrill {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @map("tenant_id") @db.Uuid
  startedAt  DateTime @map("started_at") @default(now())
  completedAt DateTime? @map("completed_at")
  status     String   @default("initiated")
  triggeredBy String?  @map("triggered_by") @db.Uuid
  pitrTarget DateTime? @map("pitr_target")
  notes      Json?
  createdAt  DateTime @map("created_at") @default(now())
  updatedAt  DateTime @map("updated_at") @default(now()) @updatedAt
  createdBy  String?  @map("created_by") @db.Uuid
  updatedBy  String?  @map("updated_by") @db.Uuid
  version    Int      @default(1)
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  accessAudits AccessAudit[]

  @@map("dr_drills")
}

model AccessAudit {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @map("tenant_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  resource  String
  action    String
  scope     String   @default("borrower")
  piiFields String[] @map("pii_fields")
  reason    String
  sessionId String?  @map("session_id") @db.Uuid
  drDrillId String?  @map("dr_drill_id") @db.Uuid
  occurredAt DateTime @map("occurred_at") @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  drDrill   DisasterRecoveryDrill? @relation(fields: [drDrillId], references: [id])

  @@map("access_audit")
}
